// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  name        String?
  email       String @unique
  number      Int? @unique
  password    String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     P2PTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers P2PTransfer[]       @relation(name: "ToUserRelation")
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Merchant {
  id          String @id @default(cuid())
  email       String  @unique
  name        String?
  auth_type   AuthType   
  cretedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  user      User @relation(fields: [userId], references: [id])

}

model Balance {
  id     Int  @id @default(autoincrement())
  userId String  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model P2PTransfer {
  id         String @id @default(cuid())
  amount     Int
  timestamp  DateTime
  fromUserId String
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus{
  Success
  Failure
  Processing
}